let lists v2 : strategy = {! Type T ::= baseType | (int) | (list T), 
			   Expression e ::= (zero) | (succ e) | (emptylist) | (consList e e) | (elementAt e e), 
               Value v ::= (zero) | (succ v) | (emptyList) | (consList v v2),
			   Error er ::= myError, 
               Context C ::= (consList C e) | (consList v C) | (elementAt C e) | (elementAt v C), 
			   Environment Gamma ::= [x : T],
			   Relation ::= Gamma |- e : T | e --> e,
			   StartingCall ::= empty |- e : T | e --> e.
			   Gamma |- x : T <== x : T in Gamma, 
			   Gamma |- zero : int, 
			   Gamma |- myError : T, 
			   Gamma |- (succ e) : T <== Gamma |- e : int,
			   Gamma |- emptyList : (list T),
			   Gamma |- (consList e1 e2) : (list T) <== Gamma |- e1 : T /\ Gamma |- e2 : (list T),
			   Gamma |- (head e) : T <== Gamma |- e : (list T),
			   Gamma |- (tail e) : (list T) <== Gamma |- e : (list T),
			   Gamma |- (elementAt e1 e2) : T <== Gamma |- e1 : (int) /\ Gamma |- e2 : (list T),
			   (consList myError E) --> myError, 
			   (consList E myError) --> myError, 
			   (elementAt myError E) --> myError, 
			   (elementAt E myError) --> myError, 
			   (elementAt (zero) (consList V1 V2)) --> V1, 
			   (elementAt (succ V) (consList V1 v2)) --> (elementAt V v2)
			 !} in ((lists vv) U {! Context E ::= (cons v E) !})> (elementAt (succ zero) (consList (succ zero) (consList (succ (succ zero)) (consList (myError) emptyList))))
