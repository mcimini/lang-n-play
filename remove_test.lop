let lists = {! 
               Type T ::= int | (list T), 
               Expression e ::= (zero) | (succ e) | (emptylist) | (consList e e) | (elementAt e e), 
               Value v ::= (zero) | (succ v) | (emptyList) | (consList v v),
               Context C ::= (consList C e) | (consList v C) | (elementAt C e) | (elementAt v C), 
               Environment Gamma ::= [x : T],
               Relation ::= Gamma |- e : T | e --> e,
               StartingCall ::= empty |- e : T | e --> e.
               Gamma |- x : T <== x : T in Gamma, 
               Gamma |- zero : int, 
               Gamma |- (succ e) : T <== Gamma |- e : int,
               Gamma |- emptyList : (list T),
               Gamma |- (consList e1 e2) : (list T) <== Gamma |- e1 : T /\ Gamma |- e2 : (list T),
               Gamma |- (elementAt e1 e2) : T <== Gamma |- e1 : (int) /\ Gamma |- e2 : (list T),
               (elementAt (zero) (consList V1 V2)) --> V1, 
               (elementAt (succ V) (consList V1 V2)) --> (elementAt V V2)
            !} 
in remove ((elementAt (succ V) (consList V1 V2)) --> (elementAt V V2)) from lists 

